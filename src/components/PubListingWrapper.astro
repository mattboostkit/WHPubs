---
import PubListing from './PubListing';
import PubCard from './PubCard.astro';

interface Props {
  pubs: any[];
  className?: string;
}

const { pubs, className } = Astro.props;
---

<div id="pub-listing-wrapper" data-pubs={JSON.stringify(pubs)}>
  <PubListing pubs={pubs} className={className} client:load />
</div>

<script>
  // Client-side script to render PubCard components
  import { h, render } from 'preact';
  
  function renderPubCards() {
    const placeholders = document.querySelectorAll('.pub-card-placeholder');
    
    placeholders.forEach(placeholder => {
      const pubData = JSON.parse(placeholder.getAttribute('data-pub') || '{}');
      const variant = placeholder.getAttribute('data-variant') || 'default';
      
      // Create a container for the server-rendered content
      const container = document.createElement('div');
      placeholder.parentNode?.replaceChild(container, placeholder);
      
      // Fetch the rendered PubCard HTML
      fetch(`/api/render-pub-card`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ pub: pubData, variant })
      })
      .then(res => res.text())
      .then(html => {
        container.innerHTML = html;
      })
      .catch(() => {
        // Fallback rendering
        container.innerHTML = `
          <div class="p-4 border rounded-lg">
            <h3 class="font-bold">${pubData.name}</h3>
            <p class="text-sm text-gray-600">${pubData.location || ''}</p>
          </div>
        `;
      });
    });
  }
  
  // Run after React component mounts
  setTimeout(renderPubCards, 100);
  
  // Re-render when filters change
  const observer = new MutationObserver(() => {
    setTimeout(renderPubCards, 100);
  });
  
  const wrapper = document.getElementById('pub-listing-wrapper');
  if (wrapper) {
    observer.observe(wrapper, { childList: true, subtree: true });
  }
</script>