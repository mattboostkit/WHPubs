---
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { MapPin, Clock, Phone, ExternalLink, Calendar, Utensils } from 'lucide-react';

export interface Props {
  pub: {
    name: string;
    slug: { current: string };
    description?: string;
    locationName?: string;
    addressLine1?: string;
    postcode?: string;
    image?: { asset?: { url: string }; alt?: string };
    heroImage?: { asset?: { url: string }; alt?: string };
    url?: string;
    externalDomain?: string;
    featured?: boolean;
    amenities?: string[];
    contactPhone?: string;
    openingHoursStructured?: any;
    foodServingTimes?: string;
  };
  variant?: 'default' | 'featured' | 'compact';
}

const { pub, variant = 'default' } = Astro.props;

const imageUrl = pub.heroImage?.asset?.url || pub.image?.asset?.url || '/images/hero-fallback.jpg';
const imageAlt = pub.heroImage?.alt || pub.image?.alt || `Image of ${pub.name}`;
const location = pub.locationName || `${pub.addressLine1}, ${pub.postcode}`.trim();

// Check if pub has its own website
const hasOwnWebsite = pub.externalDomain || pub.url;
const pubLink = pub.externalDomain ? `https://${pub.externalDomain}` : (pub.url || `/${pub.slug.current}`);
const isExternal = hasOwnWebsite;

// Get opening status (simplified)
const getDayOfWeek = () => {
  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  return days[new Date().getDay()];
};

const todayHours = pub.openingHoursStructured?.[getDayOfWeek()];
const isOpenNow = todayHours && todayHours !== 'Closed';
---

{variant === 'featured' ? (
  <Card className="overflow-hidden hover:shadow-xl transition-all duration-300 group">
    <div class="relative h-72 overflow-hidden">
      <img
        src={imageUrl}
        alt={imageAlt}
        class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
        onerror="this.onerror=null; this.src='/images/hero-fallback.jpg';"
      />
      {pub.featured && (
        <div class="absolute top-4 right-4">
          <Badge className="bg-primary/90 text-secondary backdrop-blur-sm">
            ‚≠ê Featured
          </Badge>
        </div>
      )}
      {isOpenNow && (
        <div class="absolute top-4 left-4">
          <Badge variant="secondary" className="backdrop-blur-sm">
            Open Now
          </Badge>
        </div>
      )}
      <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    </div>
    <CardHeader className="space-y-3">
      <div>
        <CardTitle className="text-2xl font-bold">{pub.name}</CardTitle>
        <div class="flex items-center text-muted-foreground mt-2">
          <MapPin className="w-4 h-4 mr-2 flex-shrink-0" />
          <span class="text-sm">{location}</span>
        </div>
      </div>
    </CardHeader>
    <CardContent className="space-y-4">
      {pub.description && (
        <CardDescription className="text-base line-clamp-3">
          {pub.description}
        </CardDescription>
      )}
      
      {pub.amenities && pub.amenities.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {pub.amenities.slice(0, 4).map((amenity) => (
            <Badge key={amenity} variant="secondary" className="text-xs">
              {amenity}
            </Badge>
          ))}
          {pub.amenities.length > 4 && (
            <Badge variant="outline" className="text-xs">
              +{pub.amenities.length - 4} more
            </Badge>
          )}
        </div>
      )}

      <div class="pt-2 space-y-2">
        {pub.contactPhone && (
          <div class="flex items-center text-sm text-muted-foreground">
            <Phone className="w-4 h-4 mr-2" />
            <a href={`tel:${pub.contactPhone}`} class="hover:text-primary transition-colors">
              {pub.contactPhone}
            </a>
          </div>
        )}
        
        {todayHours && (
          <div class="flex items-center text-sm text-muted-foreground">
            <Clock className="w-4 h-4 mr-2" />
            <span>Today: {todayHours}</span>
          </div>
        )}

        {pub.foodServingTimes && (
          <div class="flex items-center text-sm text-muted-foreground">
            <Utensils className="w-4 h-4 mr-2" />
            <span>Food service available</span>
          </div>
        )}
      </div>

      <div class="flex gap-2 pt-2">
        <a href={pubLink} target={isExternal ? "_blank" : undefined} rel={isExternal ? "noopener noreferrer" : undefined} class="flex-1">
          <Button className="w-full bg-primary hover:bg-primary/90">
            {isExternal ? 'Visit Website' : 'View Details'}
            {isExternal && <ExternalLink className="w-4 h-4 ml-2" />}
          </Button>
        </a>
      </div>
    </CardContent>
  </Card>
) : variant === 'compact' ? (
  <Card className="overflow-hidden hover:shadow-lg transition-shadow">
    <div class="flex h-full">
      <div class="w-1/3 relative overflow-hidden">
        <img
          src={imageUrl}
          alt={imageAlt}
          class="w-full h-full object-cover"
          onerror="this.onerror=null; this.src='/images/hero-fallback.jpg';"
        />
      </div>
      <div class="flex-1 p-4">
        <CardTitle className="text-lg mb-1">{pub.name}</CardTitle>
        <div class="flex items-center text-sm text-muted-foreground mb-2">
          <MapPin className="w-3 h-3 mr-1" />
          <span>{location}</span>
        </div>
        {pub.description && (
          <CardDescription className="text-sm line-clamp-2 mb-3">
            {pub.description}
          </CardDescription>
        )}
        <a href={pubLink} target={isExternal ? "_blank" : undefined} rel={isExternal ? "noopener noreferrer" : undefined}>
          <Button variant="outline" size="sm" className="w-full">
            {isExternal ? 'Visit' : 'Details'}
            {isExternal && <ExternalLink className="w-3 h-3 ml-1" />}
          </Button>
        </a>
      </div>
    </div>
  </Card>
) : (
  <Card className="overflow-hidden hover:shadow-lg transition-shadow h-full flex flex-col">
    <div class="relative h-48 overflow-hidden">
      <img
        src={imageUrl}
        alt={imageAlt}
        class="w-full h-full object-cover transition-transform hover:scale-105"
        onerror="this.onerror=null; this.src='/images/hero-fallback.jpg';"
      />
      {isOpenNow && (
        <div class="absolute top-3 left-3">
          <Badge variant="secondary" className="text-xs">
            Open
          </Badge>
        </div>
      )}
    </div>
    <CardHeader className="flex-1">
      <CardTitle className="text-lg">{pub.name}</CardTitle>
      <div class="flex items-center text-sm text-muted-foreground mt-1">
        <MapPin className="w-3 h-3 mr-1" />
        <span>{location}</span>
      </div>
    </CardHeader>
    <CardContent className="pt-0">
      {pub.description && (
        <CardDescription className="text-sm line-clamp-2 mb-4">
          {pub.description}
        </CardDescription>
      )}
      <a href={pubLink} target={isExternal ? "_blank" : undefined} rel={isExternal ? "noopener noreferrer" : undefined} class="block">
        <Button variant="outline" size="sm" className="w-full">
          {isExternal ? 'Visit Website' : 'View Details'}
          {isExternal && <ExternalLink className="w-3 h-3 ml-2" />}
        </Button>
      </a>
    </CardContent>
  </Card>
)}