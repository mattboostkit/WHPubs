---
import Layout from '../../layouts/Layout.astro';
import PageHeader from '../../components/PageHeader.astro';
import PageHero from '../../components/PageHero.astro';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Calendar, Clock } from 'lucide-react';
import { getPosts, getPubBySlug, getPageSettings } from '../../lib/sanity'; // Use getPosts and getPubBySlug

// Determine the target pub for this build/request
const targetPubSlug = import.meta.env.TARGET_PUB_SLUG;

// Fetch the specific pub's data (needed for layout customization)
const pubData = targetPubSlug ? await getPubBySlug(targetPubSlug) : null;

// Fetch posts: only for the target pub if specified, otherwise only general posts
const posts = await getPosts(targetPubSlug);

// Fetch page settings for hero image
const pageSettings = await getPageSettings('blog');

// Determine page title
const pageTitle = pubData ? `${pubData.name} - Blog` : "Blog - WH Pubs";
const pageDescription = pubData ? `Latest news from ${pubData.name}.` : "Latest news from WH Pubs.";

// Create fallback image paths
const blogFallbackImage = '/images/blog-fallback.jpg';
---

<Layout title={pageTitle} description={pageDescription} pub={pubData}>
	{/* Hero Section */}
	{pageSettings && (
		<PageHero 
			image={pageSettings.heroImage}
			title={pageSettings.heroTitle || (pubData ? `Latest News from ${pubData.name}` : 'Latest News & Updates')}
			subtitle={pageSettings.heroSubtitle}
			fallbackImage="/images/blog-hero.jpg"
		/>
	)}
	
	<main class="bg-secondary/10 min-h-screen py-12">
		<!-- Image fallback script -->
		<script is:inline>
			document.addEventListener('DOMContentLoaded', function() {
				// Add error handler to all images with data-fallback attribute
				const images = document.querySelectorAll('img[data-fallback]');
				
				images.forEach(img => {
					img.addEventListener('error', function() {
						// Only replace once to avoid infinite loops
						if (!this.hasAttribute('data-replaced')) {
							this.setAttribute('src', this.getAttribute('data-fallback'));
							this.setAttribute('data-replaced', 'true');
						}
					});
					
					// Trigger a load event to check if the current src is valid
					const currentSrc = img.getAttribute('src');
					img.setAttribute('src', '');
					img.setAttribute('src', currentSrc);
				});
			});
		</script>
		
		<div class="container mx-auto px-4">
			{!pageSettings && (
				<h1 class="text-5xl font-bold text-center mb-12 text-primary">
					{pubData ? `Latest News from ${pubData.name}` : 'Latest News & Updates'}
				</h1>
			)}
			
			<div class="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
				{posts && posts.length > 0 ? (
					posts.map(post => (
						<div class="bg-white rounded-lg shadow-lg overflow-hidden">
							<a href={`/blog/${post.slug.current}`} class="block hover:opacity-90 transition-opacity">
								<img
									src={post.mainImage?.asset?.url || '/images/blog-fallback.jpg'}
									alt={post.imageAlt || 'Blog post image'}
									class="w-full h-48 object-cover"
									onerror="this.onerror=null; this.src=this.getAttribute('data-fallback');"
									data-fallback={blogFallbackImage}
								/>
							</a>
							<div class="p-6">
								<p class="text-primary/60 text-sm mb-2">{new Date(post.publishedAt).toLocaleDateString()}</p>
								<h3 class="text-xl font-bold mb-2 hover:text-secondary transition-colors">
									<a href={`/blog/${post.slug.current}`}>{post.title}</a>
								</h3>
								{/* Use excerpt field if available */}
								<p class="text-primary/70 mb-4 line-clamp-3">{post.excerpt || post.ctaDescription}</p>
								<a href={`/blog/${post.slug.current}`} class="text-sm text-secondary hover:underline">
									Read More &rarr;
								</a>
							</div>
						</div>
					))
				) : (
					<p class="col-span-full text-center text-primary/70">
						{pubData ? `No news posts found for ${pubData.name} yet.` : 'No general news posts found.'}
					</p>
				)}
			</div>
		</div>
	</main>
</Layout>